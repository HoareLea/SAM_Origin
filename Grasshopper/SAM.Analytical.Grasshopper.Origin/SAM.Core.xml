<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SAM.Core</name>
    </assembly>
    <members>
        <member name="F:SAM.Core.Tolerance.MicroDistance">
            <summary>
            Micro dictance tolerance.
            </summary>
        </member>
        <member name="F:SAM.Core.Tolerance.Distance">
            <summary>
            Dictance tolerance.
            </summary>
        </member>
        <member name="F:SAM.Core.Tolerance.MacroDistance">
            <summary>
            Macro dictance tolerance.
            </summary>
        </member>
        <member name="F:SAM.Core.Tolerance.Angle">
            <summary>
            Angle tolerance. Equivalent of 2 degrees
            </summary>
        </member>
        <member name="P:SAM.Core.FluidMaterial.DynamicViscosity">
            <summary>
             Dynamic Viscosity of Fluid [kg/(m*s)]
            </summary>
        </member>
        <member name="P:SAM.Core.Material.ThermalConductivity">
            <summary>
            Material Thermal Conductivity [W/mK]
            </summary>
        </member>
        <member name="P:SAM.Core.Material.SpecificHeatCapacity">
            <summary>
            Specific Heat Capcity of Material [J/kgK]
            </summary>
        </member>
        <member name="P:SAM.Core.Material.Density">
            <summary>
            Material Density [kg/m3]
            </summary>
        </member>
        <member name="T:SAM.Core.IDispatch">
            <summary>
            Exposes objects, methods and properties to programming tools and other
            applications that support Automation.
            </summary>
        </member>
        <member name="M:SAM.Core.DelimitedFileReader.Read(SAM.Core.DelimitedFileRow)">
            <summary>
            Reads a row of data from a CSV file
            </summary>
            <param name="delimitedFileRow"></param>
            <returns></returns>
        </member>
        <member name="M:SAM.Core.DelimitedFileReader.Read">
            <summary>
            Reads a rows of data from a CSV file
            </summary>
            <returns>List of the rows</returns>
        </member>
        <member name="T:SAM.Core.DelimitedFileRow">
            <summary>
            Class to store one delimited file row
            </summary>
        </member>
        <member name="M:SAM.Core.DelimitedFileWriter.Write(SAM.Core.DelimitedFileRow)">
            <summary>
            Writes a single row to a CSV file.
            </summary>
            <param name="delimitedFileRow">The row to be written</param>
        </member>
        <member name="M:SAM.Core.DelimitedFileWriter.Write(System.Collections.Generic.IEnumerable{SAM.Core.DelimitedFileRow})">
            <summary>
            Writes a rows to a CSV file.
            </summary>
            <param name="delimitedFileRows">The rows to be written</param>
        </member>
        <member name="F:SAM.Core.TypeMap.tuples">
            <summary>
            list of tuples where Item1 - Id_1, Item2 - Id_2, Item3 - name_1, Item4 - name_2, Item5 - formula_1, Item6 - formula_2
            </summary>
        </member>
        <member name="M:SAM.Core.RelationCluster.Add(System.Object,System.Object)">
            <summary>
            Adds two objects to RelationCluster and creates relation between them
            </summary>
            <param name="object_1">First Object</param>
            <param name="object_2">Second Object</param>
            <returns>true if objects and relations sucessfully added</returns>
        </member>
        <member name="M:SAM.Core.RelationCluster.AddRelation(System.Guid,System.Guid)">
            <summary>
            Creates relation between two objects. Objects with provided guids needs to be added before adding relation
            </summary>
            <param name="guid_1">Guid of first element</param>
            <param name="guid_2">Guid of second element</param>
            <returns>true if relation sucessfully added</returns>
        </member>
        <member name="M:SAM.Core.Query.IsValidHash(System.String,System.String)">
            <summary>
            Compares Hash with given string value. Returns true if the same
            </summary>
            <param name="value">Text</param>
            <param name="hash">Hash</param>
            <returns>Is Valid Hash</returns>
        </member>
        <member name="M:SAM.Core.Query.ComputeHash(System.String)">
            <summary>
            Computes SHA256 Hash for given string value
            </summary>
            <param name="value">Text</param>
            <returns>SHA256 Hash</returns>
        </member>
        <member name="M:SAM.Core.Query.Copy(System.String,System.String,System.Boolean)">
            <summary>
            Copy file even it is used by another process
            </summary>
            <param name="pathSource">Source Path</param>
            <param name="pathDestination">Destination Path</param>
            <param name="overwrite">Overwrite if file exists</param>
            <returns>true if succeeded</returns>
        </member>
        <member name="M:SAM.Core.Query.Compare(System.Double,System.Double,SAM.Core.NumberComparisonType)">
            <summary>
            Compare two numbers using NumberComparisonType (Example: NumberComparisonType.Greater returns true if value_1 greater than value_2)
            </summary>
            <param name="value_1">First value </param>
            <param name="value_2">Second Value</param>
            <param name="numberComparisonType">Number Comparison Type example Equals etc.</param>
            <returns>Comparison Type Result</returns>
        </member>
    </members>
</doc>
